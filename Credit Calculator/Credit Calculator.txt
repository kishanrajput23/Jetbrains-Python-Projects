Description
Finally, let's add the ability to compute differentiated payment. This is a kind of payment where the part for reducing the credit principal is constant. Another part of the payment is for interest repayment and it reduces during the credit term. It means that the payment is different every month. Let’s look at the formula:

D_m = \dfrac{P}{n} + i * \left( P - \dfrac{P*(m-1)}{n} \right)D 
m
​	
 = 
n
P
​	
 +i∗(P− 
n
P∗(m−1)
​	
 )

Where:

D_mD 
m
​	
  = mth differentiated payment;

PP = credit principal;

ii = nominal interest rate. Usually, it’s 1/12 of the annual interest rate, and usually, it’s a floating value, not a percentage. For example, if our annual interest rate = 12%, then i = 0.01;

nn = number of payments (months);

mm = current period.

As you can see, the user has to input a lot of parameters. So, it might be convenient to use command-line arguments.

Suppose you used to run your credit calculator via a command line like this:

python creditcalc.py
Using command-line arguments, you can run your program this way:

python creditcalc.py --type=diff --principal=1000000 --periods=10 --interest=10
In that case, your program can get different values without asking the user to input them. It can be useful when you are developing your program and trying to find a mistake, so you run the program again and again with the same parameters. Also, it's convenient if you made a mistake in a single parameter. You don't have to input all other values again.

To confidently work with command-line arguments in Python, check out this tutorial.

Objectives
In this stage, you need to implement the following features:

Calculating differentiated payment. To do this, the user may run the program specifying the interest, the number of periods, and the credit principal.
The ability to calculate the same values as in the previous stage for annuity payment (principal, count of periods, and the value of payment). The user specifies all the known parameters using command-line arguments, so there will be one unknown parameter. This is the value that the user wants to calculate.

Handling invalid parameters. It's a good idea to show an error message Incorrect parameters if the parameters are invalid.

The final version of your program is supposed to work from the command line and parse the following parameters:

--type, which indicates the type of payment: "annuity" or "diff" (differentiated). If --type is specified neither as "annuity" nor as "diff", or not specified at all, show the error message.
> python creditcalc.py --principal=1000000 --periods=60 --interest=10
Incorrect parameters
--payment, which refers to the monthly payment. For --type=diff, the payment is different each month, so we cannot calculate a number of periods or the principal, therefore, its combination with --payment is invalid, too:
> python creditcalc.py --type=diff --principal=1000000 --interest=10 --payment=100000
Incorrect parameters
--principal is used for calculating both types of payment. You can get its value knowing the interest, the annuity payment, and the number of periods.
--periods parameter denotes the number of months and/or years needed to repay the credit. It's calculated based on the interest, annuity payment, and the principal.
--interest is specified without the percentage sign. Note that it may accept a floating-point value. Our credit calculator can't calculate the interest, so these parameters are incorrect:
> python creditcalc.py --type=annuity --principal=100000 --payment=10400 --periods=8
Incorrect parameters
You might have noticed that for differentiated payments you need 4 out of 5 parameters (excluding payment), and the same is true for annuity payments (missing either a number of periods, the payment, or the principal). Thus, when less than four parameters are given, you should display the error message:

> python creditcalc.py --type=annuity --principal=1000000 --payment=104000
Incorrect parameters
Another case when you should output this message is with negative values. We can't work with these!

> python creditcalc.py --type=diff --principal=30000 --periods=-14 --interest=10
Incorrect parameters
Finally, don't forget to compute the value of overpayment, and you'll have your real functional credit calculator!

CODE:-

import math

def interest():
    return float(input("Enter the credit interest: ")) / (12 * 100)

def n_of_payments():
    P = float(input("Enter the credit principal: "))
    A = float(input("Enter the monthly payment: "))
    i = interest()
    return math.log(A / (A - i * P), 1 + i)

def credit_principal():
    A = float(input("Enter the monthly payment: "))
    n = float(input("Enter the count of periods: "))
    i = interest()
    return A / ((i * math.pow(1 + i, n)) / (math.pow(1 + i, n) - 1))

def annuity_payment():
    P = float(input("Enter the credit principal: "))
    n = float(input("Enter the number of periods: "))
    i = interest()
    return P * ((i * math.pow(1 + i, n)) / (math.pow(1 + i, n) - 1))

    
calc_type = input("""What do you want to calculate?
type "n" for the number of months,
type "a" for the annuity monthly payment,
type "p" for the credit principal:
""")

if calc_type == "n":
    months = math.ceil(n_of_payments())
    years = 0
    if months == 12:
        print("You need 1 year to repay this credit!")
    elif months > 12:
        years = months // 12
        months = months % 12
        if months == 1:
            print(f"You need {years} years and 1 month to repay this credit!")
        else:
            print(f"You need {years} years and {months} months to repay this credit!")
    else:
        if months == 1:
            print(f"You need 1 months to repay this credit!")
        else:
            print(f"You need {months} months to repay this credit!")
elif calc_type == "a":
    print(f"Your annuity payment = {math.ceil(annuity_payment())}!")
elif calc_type == "p":
    print(f"Your credit principal = {round(credit_principal())}!")